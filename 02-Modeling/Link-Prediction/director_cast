{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"director_cast","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOtzkcr2QwbeHgUj7z8eZwB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gum5vTInVL-0","executionInfo":{"status":"ok","timestamp":1618539808613,"user_tz":300,"elapsed":18156,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"6c96141a-f741-4b02-e64d-338f7f9a75f5"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3xWyuoYRV1AS","executionInfo":{"status":"ok","timestamp":1618539810275,"user_tz":300,"elapsed":704,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"e8d12cc6-bf44-4a1e-d7f1-ddd98dd39288"},"source":["import os\n","cur_path = \"/content/drive/MyDrive/bds/\"\n","os.chdir(cur_path)\n","!pwd"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/content/drive/MyDrive/bds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YuzXpqumV1P3","executionInfo":{"status":"ok","timestamp":1618539811618,"user_tz":300,"elapsed":341,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"a902a8e5-fad3-40d2-a260-cffc1fb14d57"},"source":["!ls"],"execution_count":3,"outputs":[{"output_type":"stream","text":["cast_cast\t\tcommon_neighbor_dd.txt\tfinal-project\n","cast_director.txt\tdc.ipynb\t\tfinal_project.ipynb\n","cast.txt\t\tdd.ipynb\t\tnetflix_titles.csv\n","cc.ipynb\t\tdirector_cast\t\tnetflix_titles.txt\n","common_neighbor_cc.txt\tdirector-director\n","common_neighbor_dc.txt\tdirector.txt\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kx4Mu2KSYpNk","executionInfo":{"status":"ok","timestamp":1618539835306,"user_tz":300,"elapsed":300,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["import pandas as pd\n","import networkx as nx\n","from collections import Counter"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"X5xsHkCNYu3i","executionInfo":{"status":"ok","timestamp":1618539837559,"user_tz":300,"elapsed":1398,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"a84b374e-fbd6-40dd-c1e4-e48cbaa4b1a4"},"source":["df = pd.read_csv('cast_director.txt')\n","df.head()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>director</th>\n","      <th>cast</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Richard Finn</td>\n","      <td>Alan Marriott</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>Richard Finn</td>\n","      <td>Andrew Toth</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>Richard Finn</td>\n","      <td>Brian Dobson</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>Richard Finn</td>\n","      <td>Cole Howard</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>Richard Finn</td>\n","      <td>Jennifer Cameron</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0      director              cast\n","0           0  Richard Finn     Alan Marriott\n","1           0  Richard Finn       Andrew Toth\n","2           0  Richard Finn      Brian Dobson\n","3           0  Richard Finn       Cole Howard\n","4           0  Richard Finn  Jennifer Cameron"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"RiwQG1tIfwHN","executionInfo":{"status":"ok","timestamp":1618540031770,"user_tz":300,"elapsed":382,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["df = df[df['director'] != df['cast']]"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U04urlo2ZT-a","executionInfo":{"status":"ok","timestamp":1618540034305,"user_tz":300,"elapsed":282,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"d2a8b80f-f520-45ae-daaa-6231221ff743"},"source":["df.shape"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(33953, 3)"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"idCujWTAZFDz","executionInfo":{"status":"ok","timestamp":1618540035884,"user_tz":300,"elapsed":319,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["# drop duplicate rows\n","df.drop_duplicates(inplace=True)"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yuU1Rl5CZX4x","executionInfo":{"status":"ok","timestamp":1618540036921,"user_tz":300,"elapsed":249,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"56144d5f-a034-4195-cfa2-4a32bd67b0b1"},"source":["df.shape"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(33953, 3)"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"sfQRscRTaek6","executionInfo":{"status":"ok","timestamp":1618540081194,"user_tz":300,"elapsed":260,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["df['director']=df['director'].astype('str')"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"oS9-Omg_aioc","executionInfo":{"status":"ok","timestamp":1618540082097,"user_tz":300,"elapsed":293,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["df['cast']=df['cast'].astype('str')"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"id":"oSua-zEnZY1F","executionInfo":{"status":"ok","timestamp":1618540092351,"user_tz":300,"elapsed":246,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["# Creating an empty graph object\n","G = nx.Graph()"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"i3V7yQIuZeVg","executionInfo":{"status":"ok","timestamp":1618540096937,"user_tz":300,"elapsed":3271,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["for _, edge in df.iterrows():\n","    G.add_edge(edge['director'], edge['cast'])"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A87mwBejatF1","executionInfo":{"status":"ok","timestamp":1618540110254,"user_tz":300,"elapsed":427,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"b5e75888-c055-4ab3-9ded-4bdcf21468c9"},"source":["G.number_of_nodes()"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22201"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U5lxET8UZSRI","executionInfo":{"status":"ok","timestamp":1618540111289,"user_tz":300,"elapsed":245,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"b6b2133b-ff01-4b8e-d5de-ae53212da7d5"},"source":["G.number_of_edges()"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["32394"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"CeGqy-1f1giH","executionInfo":{"status":"ok","timestamp":1618540113472,"user_tz":300,"elapsed":253,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["sort_list = sorted(G.degree, key=lambda x: x[1], reverse=True)\n","node_list = [node for (node, val) in sort_list][:20]"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xpa6WsZX1wou","executionInfo":{"status":"ok","timestamp":1618540114527,"user_tz":300,"elapsed":341,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"fa9c03fc-5056-4b33-fd5f-e83d27340a13"},"source":["node_list"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Steven Spielberg',\n"," 'Martin Scorsese',\n"," 'Steve Carr',\n"," 'Dibakar Banerjee',\n"," 'Noah Baumbach',\n"," 'McG',\n"," 'Robert Rodriguez',\n"," 'Quentin Tarantino',\n"," 'Akiva Schaffer',\n"," 'David Dhawan',\n"," 'Kunle Afolayan',\n"," 'Cathy Garcia-Molina',\n"," 'Zoya Akhtar',\n"," 'Elizabeth Banks',\n"," 'Anurag Kashyap',\n"," 'Umesh Mehra',\n"," 'Yılmaz Erdoğan',\n"," 'Kevin Smith',\n"," 'Terry Gilliam',\n"," 'Ram Gopal Varma']"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"5pa8SYOmZkez","executionInfo":{"status":"ok","timestamp":1618540119952,"user_tz":300,"elapsed":239,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["def common_neighbors(G,K):\n","    node = sorted(list(G))\n","    f = open(\"common_neighbor_dc.txt\", \"a\")\n","    for i in node_list:\n","        neighbor=[n for n in G.neighbors(i)]\n","        non_neighbor = list(set(node)-set(neighbor))\n","        non_neighbor.remove(i)\n","        new_dict={}\n","        for j in non_neighbor:\n","            neighbor_j = [n for n in G.neighbors(j)]\n","            common = [value for value in neighbor if value in neighbor_j]\n","            new_dict[j] = len(common)\n","            k = Counter(new_dict)\n","            high = k.most_common(K)\n","            my_keys = [key for key, val in high]\n","        line = [*[i],*my_keys]\n","        f.write(','.join(line)+'\\n')\n","    f.close()       "],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"vSriU7i3cWPw","executionInfo":{"status":"ok","timestamp":1618541022397,"user_tz":300,"elapsed":900708,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["common_neighbors(G,10)"],"execution_count":33,"outputs":[]}]}