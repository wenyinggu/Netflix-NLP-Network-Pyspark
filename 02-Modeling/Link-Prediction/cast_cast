{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cast_cast","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPmCEq0nutS4EOmSnocf/4C"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gum5vTInVL-0","executionInfo":{"status":"ok","timestamp":1618501774282,"user_tz":300,"elapsed":451,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"dc9bd5f2-fea5-4287-e179-5b009452e666"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3xWyuoYRV1AS","executionInfo":{"status":"ok","timestamp":1618501775938,"user_tz":300,"elapsed":562,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"64868f37-f8c3-400b-8edb-7e25c4810845"},"source":["import os\n","cur_path = \"/content/drive/MyDrive/bds/\"\n","os.chdir(cur_path)\n","!pwd"],"execution_count":29,"outputs":[{"output_type":"stream","text":["/content/drive/MyDrive/bds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YuzXpqumV1P3","executionInfo":{"status":"ok","timestamp":1618501777456,"user_tz":300,"elapsed":842,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"955426eb-8b7a-4fbc-b587-c47e8ea01132"},"source":["!ls"],"execution_count":30,"outputs":[{"output_type":"stream","text":["cast_cast\t   common_neighbor.txt\tdirector-director    netflix_titles.csv\n","cast_director.txt  dc.ipynb\t\tdirector.txt\t     netflix_titles.txt\n","cast.txt\t   dd.ipynb\t\tfinal-project\n","cc.ipynb\t   director_cast\tfinal_project.ipynb\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kx4Mu2KSYpNk","executionInfo":{"status":"ok","timestamp":1618501778921,"user_tz":300,"elapsed":910,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["import pandas as pd\n","import networkx as nx\n","from collections import Counter"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"X5xsHkCNYu3i","executionInfo":{"status":"ok","timestamp":1618501781224,"user_tz":300,"elapsed":1028,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"15d7663c-dfd0-4fa4-b1c1-09463ec5d8a6"},"source":["df = pd.read_csv('cast.txt',names=['Source','Target'])\n","df.head()"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Source</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Alan Marriott</td>\n","      <td>Andrew Toth</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Alan Marriott</td>\n","      <td>Brian Dobson</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Alan Marriott</td>\n","      <td>Cole Howard</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Alan Marriott</td>\n","      <td>Jennifer Cameron</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Alan Marriott</td>\n","      <td>Jonathan Holmes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          Source            Target\n","0  Alan Marriott       Andrew Toth\n","1  Alan Marriott      Brian Dobson\n","2  Alan Marriott       Cole Howard\n","3  Alan Marriott  Jennifer Cameron\n","4  Alan Marriott   Jonathan Holmes"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U04urlo2ZT-a","executionInfo":{"status":"ok","timestamp":1618501783144,"user_tz":300,"elapsed":644,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"8bdb077c-89cb-41fc-ed80-e9b9ad19bc84"},"source":["df.shape"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(208738, 2)"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"idCujWTAZFDz","executionInfo":{"status":"ok","timestamp":1618501784077,"user_tz":300,"elapsed":445,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["# drop duplicate rows\n","df.drop_duplicates(inplace=True)"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yuU1Rl5CZX4x","executionInfo":{"status":"ok","timestamp":1618501785595,"user_tz":300,"elapsed":514,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"70154677-19d3-4f77-9248-dfff03bf75e7"},"source":["df.shape"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(199532, 2)"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"sfQRscRTaek6","executionInfo":{"status":"ok","timestamp":1618501787174,"user_tz":300,"elapsed":940,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["df['Source']=df['Source'].astype('str')"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"id":"oS9-Omg_aioc","executionInfo":{"status":"ok","timestamp":1618501788083,"user_tz":300,"elapsed":409,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["df['Target']=df['Target'].astype('str')"],"execution_count":37,"outputs":[]},{"cell_type":"code","metadata":{"id":"oSua-zEnZY1F","executionInfo":{"status":"ok","timestamp":1618501789697,"user_tz":300,"elapsed":1033,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["# Creating an empty graph object\n","G = nx.Graph()"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"i3V7yQIuZeVg","executionInfo":{"status":"ok","timestamp":1618501810101,"user_tz":300,"elapsed":18168,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["for _, edge in df.iterrows():\n","    G.add_edge(edge['Source'], edge['Target'])"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A87mwBejatF1","executionInfo":{"status":"ok","timestamp":1618501816256,"user_tz":300,"elapsed":701,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"82c9748a-e993-43d5-c8bb-33c9147eb4ec"},"source":["G.number_of_nodes()"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["27088"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"CeGqy-1f1giH","executionInfo":{"status":"ok","timestamp":1618501831142,"user_tz":300,"elapsed":603,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["sort_list = sorted(G.degree, key=lambda x: x[1], reverse=True)\n","node_list = [node for (node, val) in sort_list][:20]"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xpa6WsZX1wou","executionInfo":{"status":"ok","timestamp":1618501832203,"user_tz":300,"elapsed":383,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}},"outputId":"7e81dd6e-c2d8-4f00-88ac-05c5b51a73f6"},"source":["node_list"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Anupam Kher',\n"," 'Shah Rukh Khan',\n"," 'Yuki Kaji',\n"," 'Takahiro Sakurai',\n"," 'Fred Tatasciore',\n"," 'Yuichi Nakamura',\n"," 'Akshay Kumar',\n"," 'Om Puri',\n"," 'Paresh Rawal',\n"," 'Hiroshi Kamiya',\n"," 'Naseeruddin Shah',\n"," 'Amitabh Bachchan',\n"," 'Boman Irani',\n"," 'Jun Fukuyama',\n"," 'Jim Broadbent',\n"," 'Kari Wahlgren',\n"," 'Katsuyuki Konishi',\n"," 'Nick Swardson',\n"," 'Adam Scott',\n"," 'Nicolas Cage']"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"wVvMox4aNN7s","executionInfo":{"status":"ok","timestamp":1618501841507,"user_tz":300,"elapsed":793,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["def common_neighbors(G,K):\n","    node = sorted(list(G))\n","    f = open(\"common_neighbor.txt\", \"a\")\n","    for i in node_list:\n","        neighbor=[n for n in G.neighbors(i)]\n","        non_neighbor = list(set(node)-set(neighbor))\n","        non_neighbor.remove(i)\n","        new_dict={}\n","        for j in non_neighbor:\n","            neighbor_j = [n for n in G.neighbors(j)]\n","            common = [value for value in neighbor if value in neighbor_j]\n","            new_dict[j] = len(common)\n","            k = Counter(new_dict)\n","            high = k.most_common(K)\n","            my_keys = [key for key, val in high]\n","        line = [*[i],*my_keys]\n","        f.write(','.join(line)+'\\n')\n","    f.close()       \n","        "],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"2-hYwpeCNW56","executionInfo":{"status":"ok","timestamp":1618503300967,"user_tz":300,"elapsed":1457929,"user":{"displayName":"yilin yang","photoUrl":"","userId":"14721659823629954663"}}},"source":["common_neighbors(G,10)"],"execution_count":46,"outputs":[]}]}